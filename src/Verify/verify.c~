/**
We give a verification program to verify the correctness of the found preimages. This file generates the messages M, M_{58}, M_{59}, M_{60} and outputs their hash values. For the implementation of Keccak-f permutation, which is the function ``KeccakP1600Round'' in the main() function, as well as other official functions, please refer to:
	KeccakCodePackage-master/lib/low/KeccakP-1600/KeccakP-1600-reference.c, 
which is available at https://keccak.team/software.html.
*/
#include <stdlib.h>
#include <stdio.h>
#include <memory.h>
#include <assert.h>

#define reducedRound 3

typedef unsigned char UINT8;
typedef unsigned long long UINT64;
typedef UINT64 tKeccakLane;

#define KeccakReferences
#define maxNrRounds 24
#define reducedRound 3
#define nrLanes 25
#define index(x, y) (((x)%5)+5*((y)%5))
#define KeccakP1600_stateSizeInBytes    200
#define MIN(a, b) ((a) < (b) ? (a) : (b))

static tKeccakLane KeccakRoundConstants[maxNrRounds];
static unsigned int KeccakRhoOffsets[nrLanes];

void KeccakP1600_InitializeRoundConstants(void);
void KeccakP1600_InitializeRhoOffsets(void);
static int LFSR86540(UINT8 *LFSR);



/*******  initialization functions ************/


void KeccakP1600_Initialize(void *state)
{
    memset(state, 0, 1600/8);
}

void KeccakP1600_StaticInitialize(void)
{
    if (sizeof(tKeccakLane) != 8) {
        printf("tKeccakLane should be 64-bit wide\n");
        
    }
    KeccakP1600_InitializeRoundConstants();
    KeccakP1600_InitializeRhoOffsets();
}


static int LFSR86540(UINT8 *LFSR)
{
    int result = ((*LFSR) & 0x01) != 0;
    if (((*LFSR) & 0x80) != 0)
    /* Primitive polynomial over GF(2): x^8+x^6+x^5+x^4+1 */
        (*LFSR) = ((*LFSR) << 1) ^ 0x71;
    else
        (*LFSR) <<= 1;
    return result;
}

void KeccakP1600_InitializeRoundConstants(void)
{
    UINT8 LFSRstate = 0x01;
    unsigned int i, j, bitPosition;
    
    for(i=0; i<maxNrRounds; i++) {
        KeccakRoundConstants[i] = 0;
        for(j=0; j<7; j++) {
            bitPosition = (1<<j)-1; /* 2^j-1 */
            if (LFSR86540(&LFSRstate))
                KeccakRoundConstants[i] ^= (tKeccakLane)1<<bitPosition;
        }
    }
}

void KeccakP1600_InitializeRhoOffsets(void)
{
    unsigned int x, y, t, newX, newY;
    
    KeccakRhoOffsets[index(0, 0)] = 0;
    x = 1;
    y = 0;
    for(t=0; t<24; t++) {
        KeccakRhoOffsets[index(x, y)] = ((t+1)*(t+2)/2) % 64;
        newX = (0*x+1*y) % 5;
        newY = (2*x+3*y) % 5;
        x = newX;
        y = newY;
    }
}




/******* 5 operation functions ************/


#define ROL64(a, offset) ((offset != 0) ? ((((tKeccakLane)a) << offset) ^ (((tKeccakLane)a) >> (64-offset))) : a)

static void theta(tKeccakLane *A)
{
    unsigned int x, y;
    tKeccakLane C[5], D[5];
    
    for(x=0; x<5; x++) {
        C[x] = 0;
        for(y=0; y<5; y++)
            C[x] ^= A[index(x, y)];
    }
    for(x=0; x<5; x++)
        D[x] = ROL64(C[(x+1)%5], 1) ^ C[(x+4)%5];
    for(x=0; x<5; x++)
        for(y=0; y<5; y++)
            A[index(x, y)] ^= D[x];
}

static void rho(tKeccakLane *A)
{
    unsigned int x, y;
    
    for(x=0; x<5; x++) for(y=0; y<5; y++)
        A[index(x, y)] = ROL64(A[index(x, y)], KeccakRhoOffsets[index(x, y)]);
}

static void pi(tKeccakLane *A)
{
    unsigned int x, y;
    tKeccakLane tempA[25];
    
    for(x=0; x<5; x++) for(y=0; y<5; y++)
        tempA[index(x, y)] = A[index(x, y)];
    for(x=0; x<5; x++) for(y=0; y<5; y++)
        A[index(0*x+1*y, 2*x+3*y)] = tempA[index(x, y)];
}

static void chi(tKeccakLane *A)
{
    unsigned int x, y;
    tKeccakLane C[5];
    
    for(y=0; y<5; y++) {
        for(x=0; x<5; x++)
            C[x] = A[index(x, y)] ^ ((~A[index(x+1, y)]) & A[index(x+2, y)]);
        for(x=0; x<5; x++)
            A[index(x, y)] = C[x];
    }
}

static void iota(tKeccakLane *A, unsigned int indexRound)
{
    A[index(0, 0)] ^= KeccakRoundConstants[indexRound];
}




/*******  permutation functions ************/


void KeccakP1600Round(tKeccakLane *state, unsigned int indexRound)
{

    theta(state);  
    rho(state);
	pi(state);
	chi(state);
	iota(state, indexRound);

}

void KeccakF1600Permute(tKeccakLane *state, unsigned int nRounds){
    for (int n = 0; n < nRounds; n++) {
        KeccakP1600Round(state, n);
    }
}


/****  Compute the hash value of input *****/
void Keccak(unsigned int rate, unsigned int capacity, const UINT64 *input, 
	unsigned int inputBitLen, UINT64 *output, 
	unsigned int outputBitLen, int level){ 

	tKeccakLane state[25]; 
	unsigned int blockSize = 0; 
	unsigned int i; 
	unsigned rateInWords = rate / 64; 
	if((rate + capacity) != 1600 || (rate % 8) != 0){ 
		printf("rate or capacity is illegal.\n"); 
		return; 
	} 

	/* Initialize the state */ 
	KeccakP1600_StaticInitialize(); 
	KeccakP1600_Initialize(state); 
	
	/* Absorb all the input blocks */ 
	int pos = 0; 
	int blocknum = 0; 
	
	while (inputBitLen > pos) { 
		blocknum ++; 
		blockSize = MIN(inputBitLen- pos, rate); 
		for (i = 0; i < blockSize; i++) { 
			UINT64 mask = (UINT64)1<< ((pos + i) % 64); 
			state[i/ 64] ^= input[(pos+i) / 64] & mask; 
		} 
		pos += blockSize; 
		if(blockSize == rate){ 
			KeccakF1600Permute(state, reducedRound); 
			blockSize = 0; 
		} 
	} 

	/* Do the padding and switch to the squeezing phase */ 
	/* Add the first bit of padding */ 
	state[blockSize /64 ] ^= (UINT64) 1 << (blockSize % 64); 
	
	/* If the first bit of padding is at position rate - 1,
	we need a whole new block for the second bit of padding */ 
	if (blockSize == (rate - 1)) { 
		KeccakF1600Permute(state, reducedRound); 
	} 

	/* Add the second bit of padding */ 
	state[rateInWords - 1] ^= (UINT64) 1 << 63; 

	/* Switch to the squeezing phase */ 
	KeccakF1600Permute(state, reducedRound); 

	/* Squeeze out all the output blocks */ 
	pos = 0; 
	while(outputBitLen - pos > 0) { 
		blockSize = MIN(outputBitLen, rate); 
		for (i = 0; i < blockSize; i++) { 
			UINT64 mask = (UINT64)1<< (i % 64); 
			output[(pos + i)/ 64] ^= (state[i/ 64] & mask) << (pos % 64); 
		} 
		pos += blockSize; 
		if (outputBitLen - pos > 0){ 
			KeccakF1600Permute(state,reducedRound); 
			blockSize = 0; 
		} 
	} 
} 


/*** print the message and hash value to the screen ***/
void printHash(UINT64 message[], int inputLen, UINT64 *hash, int outputLen) { 
	printf("-The message (lenght = %d): \n",inputLen); 
	for (int i = 0; i <= inputLen / 64 ; i++) { 
		printf("%016llX ",message[i]); 
	} 
	printf("\n-The hash (length = %d): \n",outputLen); 
	for (int i = 0; i <= outputLen / 64 ; i++) { 
		printf("%016llX ",hash[i]); 
	} 
	printf("\n\n"); 
} 



int main(int argc, const char * argv[]) { 

	UINT64 message_1[1] = {1}; 
	
	UINT64 message_58[36]= {0x3867ED3B88A48506,0xFFFFFFFFFFFFFFFF,
	0xDD2D9BE5549AE517,0xFFFFFFFFFFFFFFFF,0x0,0x97CBA3B4524267F6,0x0,
	0xF607605E0D17724B,0x0,0x0,0x59E591785BB04788,0x0,0x87A44FB877A61A6E,
	0x0,0x0,0xF649DFF78156A578,0x0,0xAC8EB4032E2B8D32,0xC84C8045515BF0C7,
	0x61FD4B2BBE00140E,0x00B252887E479E1D,0x4CA8454ECB4032EC,
	0x0980778FEAFC137D,0x1B4109C0E732BD96,0x820D1264F56CED03,
	0xE3A15B12575B72A2,0x1A068D85C2B37FE0,0x5DCA726A8F294970,
	0xD41129BE08A68BD4,0x301DD29F5E9BE657,0x98A7904810694A48,
	0xB3E8566CE50EA6AA,0x48C3E4DEB3ADD02B,0x853EF9C96DC6F02D,
	0xA72B40AD1F31A630,0xAAD47114F4750BFC};
	
	UINT64 message_59[36] = {0x35EF68DC35F1E5EB,0xFFFFFFFFFFFFFFFF,
	0xA1D249A40996BB5F,0xFFFFFFFFFFFFFFFF,0x0,0x42F30B16705F6ECA,0x0,
	0x26A9E432AE324F66,0x0,0x0,0xBBB37F56A6F28967,0x0,0xA9590D7698444C80,
	0x0,0x0,0xCCAF1C9CE35C0246,0x0,0x2E22A0E03FE0B8B9,0xCCADB05484618913,
	0xCB72585A10CF1D24,0x5142B6082D69F648,0x55FF802052E9AFA7,
	0x5002434225118309,0x4673F9FF53CF4651,0x422091CBEE6ED26C,
	0x2CED676FB523B95D,0xAF5FD173FA98BE32,0x1BB7489625D2A58A,
	0x1B58D9FB91AD563D,0xD2F304B902CD182E,0x9F519823A0C16E4D,
	0xA54F438AFE22755C,0x8C39E80475FCDBB0,0xB908F9B8CD448A94,
	0x63EF7F66EA21A245,0xD0A64F63C7333027};
	
	UINT64 message_60[36] = {0xCBB53657E0A66871,0xFFFFFFFFFFFFFFFF,
	0x7537C0597B751AA7, 0xFFFFFFFFFFFFFFFF,0x0,0xA27C4639BB60DFF0,0x0,
	0x561C6D11D6A8DE58,0x0,0x0,0x22DF18C837CF65DB,0x0,0x37C8309A24DD20E7,
	0x0,0x0,0x4B1668A66C09D25A,0x0,0x14E39DD28900E418,0xB5B27127B16157CE,
	0x1D9CDF75F80E635D,0xD2024BC09980F06E,0x43E0D61A974E2162,
	0xD3E8E4C133283C19,0x291ADC10C38952D3,0x0D79C02584D59EB5,
	0x5B6EDBF95FBBD637,0xFDF01822DC1C43A3,0x516EB953B657C03F,
	0x8C83A4CFE46AFA61,0x8EF91ECCAD2D5731,0x3510F4267D8A4D55,
	0x13A2BACDCE43348D,0x0A22C2B955093C72,0x8836257614188A4E,
	0xAFBB582F7829B0EB,0x6CF33EA53BEC3299};
	
	UINT64 message_test[36] = {0x108ED92E2A9AB78C, 0xFFFFFFFFFFFFFFFF, 0x9B401DBE01EDD3A1, 0xFFFFFFFFFFFFFFFF, 0x0000000000000000, 0xD779ED50A2E88548, 0x0000000000000000, 0x9FAECBF33DC714CD, 0x0000000000000000, 0x0000000000000000, 0xAECBDBC8355C386C, 0x0000000000000000, 0x37CAA3C793513424, 0x0000000000000000, 0x0000000000000000, 0x693CEFB6BD2E0AA8, 0x0000000000000000, 0x3324758AAF7BF348, 0x08F6E82D4EA97789, 0x9E654F4D628E5E0A, 0xEAA7FB84293D8BFD, 0xE04D7792982A6492, 0x1957CA67F3B2D8A9, 0x635210605D7C0425, 0x4607661F754D8A32, 0x2F5EC32B3E5C294D, 0x5A542DE6F1B47ACA, 0x8E99D3EC845561AA, 0xE0C1A27F4C0CB568, 0xAB69E3DF97753068, 0x4D4E68EA8FA71E54, 0xDAC6DF2D86F44B84, 0xE6FCC70DFFBC1504, 0xD575E936B798E300, 0xEFD3007CFF93F6F1, 0xA292C500D19B55B6};

	unsigned int inputBitLen1 = 1,inputBitLen60 = 2302, inputBitLen59 = 2302,
	inputBitLen58=2301, outputBitLen = 224;
	unsigned int inputBitLentest = 2301; 
	UINT64 *hash_1,*hash_60,*hash_59,*hash_58, *hash_test; 

	hash_1 = (UINT64*)calloc(outputBitLen / 64 + 1, sizeof(UINT64)); 
	hash_60 = (UINT64*)calloc(outputBitLen / 64 + 1, sizeof(UINT64)); 
	hash_58 = (UINT64*)calloc(outputBitLen / 64 + 1, sizeof(UINT64)); 
	hash_59 = (UINT64*)calloc(outputBitLen / 64 + 1, sizeof(UINT64)); 
    hash_test = (UINT64*)calloc(outputBitLen / 64 + 1, sizeof(UINT64)); 

	/*Generate the hash values of messages*/
	Keccak(1152, 448, message_1, inputBitLen1, hash_1, outputBitLen, 0); 
	Keccak(1152, 448, message_60, inputBitLen60, hash_60, outputBitLen, 0); 
	Keccak(1152, 448, message_59, inputBitLen59, hash_59, outputBitLen, 0); 
	Keccak(1152, 448, message_58, inputBitLen58, hash_58, outputBitLen, 0); 
	Keccak(1152, 448, message_test, inputBitLentest, hash_test, outputBitLen, 0); 
	/*output the 224-bit hash values in hex*/
	printf("M_1:\n");
	printHash(message_1,inputBitLen1, hash_1, outputBitLen);
	printf("\n\nM_60:\n");
	printHash(message_60,inputBitLen60,hash_60, outputBitLen); 
	printf("\n\nM_59:\n");
	printHash(message_59,inputBitLen59,hash_59, outputBitLen); 
	printf("\n\nM_58:\n");
	printHash(message_58,inputBitLen58,hash_58, outputBitLen); 
	
	printf("\n\message_test:\n");
	printHash(message_test,inputBitLentest,hash_test, outputBitLen); 
	return 0; 
} 
